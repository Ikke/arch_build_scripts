#!/bin/bash

source /usr/share/makepkg/util/message.sh
source /etc/makepkg.conf

arches=('x86_64' 'armv7h')
repo_path=/data/repo
repo_name=custom.db.tar.xz

#options
force_build=0
batch=0

colorize

confirm ()
{
    question=$1
    default=${2-0}

    if [[ $default -eq 0 ]]
    then
        hint="[Y/n]"
        ret=1
    else
        hint="[y/N]"
        ret=0
    fi

    echo -n "$question $hint (\"A\" to abort) "
    read -sn 1 answer
    echo

    case $answer in
        y|Y)
            return 0
            ;;
        n|N)
            return 1
            ;;
        A)
            msg "Aborting"
            exit
            ;;
        *)
            return $ret
    esac
}

parse_opt ()
{
    while getopts "fb" opt
    do
        case $opt in
        f)
            force_build=1
            ;;
        b)
            batch=1
            ;;
        esac
    done
}

pkg_filename ()
{
    local pkgname=$1
    local arch=$2
    local pkg_filename
    local pkg_epoch

    if [[ ! -z $epoch ]]
    then
        pkg_epoch="$epoch:"
    fi

    pkg_filename=$pkgname-$pkg_epoch$pkgver-$pkgrel-$arch.pkg.tar.xz
    printf $pkg_filename
}

check_makedeps()
{
    local makedepends=$@

    msg "Checking make dependencies"

    local missing_deps=$(pacman -T ${makedepends[@]})

    if [[ -z $missing_deps ]]
    then
        msg2 "All dependencies installed"
        return 0
    fi


    msg2 "Dependencies missing: $missing_deps"
    if confirm "Should they be installed?"
    then
        sudo pacman -S $missing_deps --noconfirm || return $?
    fi
}

add_pkgs_to_repo ()
{
    local version=$1; shift
    local rel=$1; shift
    local arch=$1; shift
    local packages="$@"
    
    msg "Adding packages to repository"

    if [[ $arch == any ]]
    then
        local pkg_arches=$arches
    else
        local pkg_arches=($arch)
    fi

    for pkg_arch in $pkg_arches
    do
        msg2 $pkg_arch

        local -a copied_pkgs=()

        for pkg in $packages
        do
            local new_pkg_name=$(pkg_filename $pkg $arch)

            if [[ ! -f $new_pkg_name ]]
            then
                new_pkg_name=$(pkg_filename $pkg any)

                if [[ ! -f $new_pkg_name ]]
                then
                    error "Could not find package files for $pkg"
                    exit 1
                fi
            fi

            remove_pkgs $repo_path/$pkg_arch $pkg
            copy_package $pkg_arch $new_pkg_name

            copied_pkgs+=($new_pkg_name)
        done

        msg2 "Updating repo %s for %s" $repo_name $pkg_arch
        (cd $repo_path/$pkg_arch && repo-add --verify --sign $repo_name ${copied_pkgs[@]})
    done
}

copy_package ()
{
    local arch=$1
    local pkg=$2

    cp $pkg "$repo_path/$arch" || exit 1
    if [[ -f $pkg.sig ]]
    then
        cp $pkg.sig "$repo_path/$arch"
    fi
}

remove_pkgs ()
{
    local path=$1
    local name=$2

    local existing_pkgs=($(ls $path | grep -E "^$name-[0-9]+\..+pkg\.tar\.xz$"))

    for found_pkg in $existing_pkgs
    do
        rm $path/$found_pkg
        rm $path/$found_pkg.sig 2>/dev/null
    done
}

sign_pkgs ()
{
    local arch=$1; shift
    local -a packages="$@"
    msg "Signing packages"

    for pkg in ${packages[@]}
    do
        msg2 $pkg
        file_name=$(pkg_filename $pkg $arch)

        if [[ ! -f $file_name ]]
        then
            file_name=$(pkg_filename $pkg any)

            if [[ ! -f $file_name ]]
            then
                error "Could not find package files for $pkg"
                exit 1
            fi
        fi

        gpg --detach-sign --use-agent --no-armor "$file_name"  || exit 1
    done
}

parse_opt $@

if [[ ! -f PKGBUILD ]]
then
    error "Could not find PKGBUILD"
    exit 1
fi

source PKGBUILD

if [[ ${arch[0]} == "any" ]]
then
    build_arch=any
else
    build_arch=$CARCH
fi

main_package_file=$(pkg_filename ${pkgname[0]} $build_arch)

SKIP_BUILD=0

if [[ -f $main_package_file ]]
then
    if [[ $batch -eq 1 || $force_build -eq 1 ]]
    then
        SKIP_BUILD=$([[ $force_build -eq 1 ]] && echo 0 || echo 1)
    else
        if confirm "Package already exists. Skip building?"
        then
            SKIP_BUILD=1
        fi
    fi
fi

if [[ $SKIP_BUILD -eq 0 ]]
then
    check_makedeps ${makedepends[@]} || { error "Could not install all makedepends"; exit $?; }

    msg "Building package"

    makepkg -d -f --noconfirm

    if [[ $? -ne 0 ]]
    then
        echo "Something went wrong with building the package"
        exit 1
    fi

    sign_pkgs $build_arch ${pkgname[@]}
fi

if [[ $batch -eq 1 ]] || confirm "Package has been built. Add to repository?"
then
    add_pkgs_to_repo $pkgver $pkgrel $build_arch ${pkgname[@]}
fi
